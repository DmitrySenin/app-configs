#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: My Emacs Configuration
#+DATE: <2019-05-12 Sun>
#+AUTHOR: Dmitry Senin
#+EMAIL: white.lord.mane@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.2 (Org mode 9.1.9)

* UI tweaks
** Hide tool, menu and scroll bars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
#+END_SRC
** Replace 'yes or no" with 'y or n'
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Do not show the Welcome screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Scroll line-by-line instead of page-by-page
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** Highlight the current line
#+BEGIN_SRC emacs-lisp
  (when window-system (global-hl-line-mode t))
#+END_SRC
** Show lines and columns on the modeline
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
** show line numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
#+END_SRC
** wrap long lines
#+BEGIN_SRC emacs-lisp
  (visual-line-mode 1)
#+END_SRC
* System
** starting emacs server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
** map Windows to Super
#+BEGIN_SRC emacs-lisp
  (setq w32-lwindow-modifier 'super)
#+END_SRC
** Turn off back-ups
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC
** Turn off auto-save
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
#+END_SRC
** Do not ring the bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** open config
#+BEGIN_SRC emacs-lisp
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** realod config
#+BEGIN_SRC emacs-lisp
  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/configuration.org")))
   (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

** subword
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** brackets auto-complete
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs `(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})))
  (electric-pair-mode 1)
#+END_SRC
** kill the current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC
** turn off indentation using tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
** remove trailing spaces upon save
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
* Packages
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
** beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init (beacon-mode 1))
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-expert t)
#+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
** rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+END_SRC

** switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshhold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
** rainbow-delimeters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** htmlize
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC
** popup-kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
** json-mode
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t)
#+END_SRC
** yaml-mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC
** handlebars-mode
#+BEGIN_SRC emacs-lisp
  (use-package handlebars-mode
    :ensure t)
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config
    (require 'helm-config)
    (helm-mode 1)
    (define-key global-map [remap find-file] 'helm-find-files)
    (define-key global-map [remap occur] 'helm-occur)
    (define-key global-map [remap list-buffers] 'helm-buffers-list)
    (define-key global-map [remap dabbrev-expand] 'helm-dabbrev)
    (define-key global-map [remap execute-extended-command] 'helm-M-x))
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-mode 1)
    (setq projectile-switch-project-action #'projectile-dired)
    (setq projectile-completion-system 'helm))
#+END_SRC
** helm-projectile
#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :ensure t
    :after projectile
    :config
    (helm-projectile-on))
#+END_SRC
* Overrides
** window splitting
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** kill whole word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-x w w") 'kill-whole-word)
#+END_SRC
* Enabled commands
** Dired
*** dired-find-alternate-file
#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
